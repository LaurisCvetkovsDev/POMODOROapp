import React, { useEffect, useState } from 'react';

interface UpdateInfo {
  version: string;
  releaseDate: string;
  releaseName?: string;
  releaseNotes?: string;
}

interface DownloadProgress {
  bytesPerSecond: number;
  percent: number;
  transferred: number;
  total: number;
}

const UpdateNotification: React.FC = () => {
  const [updateAvailable, setUpdateAvailable] = useState<UpdateInfo | null>(null);
  const [downloadProgress, setDownloadProgress] = useState<DownloadProgress | null>(null);
  const [updateDownloaded, setUpdateDownloaded] = useState<UpdateInfo | null>(null);
  const [appVersion, setAppVersion] = useState<string>('–í–µ–±-–≤–µ—Ä—Å–∏—è');
  const [isElectron, setIsElectron] = useState(false);
  const [isChecking, setIsChecking] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Electron
    const checkElectron = () => {
      const hasElectronAPI = typeof window !== 'undefined' && !!window.electronAPI;
      setIsElectron(hasElectronAPI);
      
      if (process.env.NODE_ENV === 'development') {
        console.log('UpdateNotification: Electron API –¥–æ—Å—Ç—É–ø–µ–Ω?', hasElectronAPI);
      }
    };

    checkElectron();

    if (window.electronAPI) {
      // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      window.electronAPI.getAppVersion().then((version: string) => {
        setAppVersion(version);
        if (process.env.NODE_ENV === 'development') {
          console.log('UpdateNotification: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', version);
        }
      }).catch((error) => {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        setAppVersion('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      });

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const handleUpdateAvailable = (event: any, info: UpdateInfo) => {
        console.log('UpdateNotification: –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', info);
        setUpdateAvailable(info);
        setIsChecking(false);
      };

      const handleDownloadProgress = (event: any, progress: DownloadProgress) => {
        console.log('UpdateNotification: –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:', progress.percent + '%');
        setDownloadProgress(progress);
      };

      const handleUpdateDownloaded = (event: any, info: UpdateInfo) => {
        console.log('UpdateNotification: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ:', info);
        setUpdateDownloaded(info);
        setDownloadProgress(null);
      };

      window.electronAPI.onUpdateAvailable(handleUpdateAvailable);
      window.electronAPI.onDownloadProgress(handleDownloadProgress);
      window.electronAPI.onUpdateDownloaded(handleUpdateDownloaded);

      // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      return () => {
        if (window.electronAPI) {
          window.electronAPI.removeAllListeners('update-available');
          window.electronAPI.removeAllListeners('download-progress');
          window.electronAPI.removeAllListeners('update-downloaded');
        }
      };
    }
  }, []);

  const handleCheckForUpdates = async () => {
    if (!window.electronAPI) {
      console.warn('Electron API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
      return;
    }

    setIsChecking(true);
    
    try {
      console.log('UpdateNotification: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      await window.electronAPI.checkForUpdates();
      
      // –ï—Å–ª–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTimeout(() => {
        setIsChecking(false);
      }, 5000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      setIsChecking(false);
    }
  };

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Electron
  if (!isElectron) {
    return null;
  }

  return (
    <div className="update-notification">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ */}
      <div className="version-info">
        <small className="text-muted">–í–µ—Ä—Å–∏—è: {appVersion}</small>
        <button 
          className={`btn btn-link btn-sm p-0 ms-2 ${isChecking ? 'disabled' : ''}`}
          onClick={handleCheckForUpdates}
          disabled={isChecking}
          title={isChecking ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}
        >
          {isChecking ? '‚è≥' : 'üîÑ'}
        </button>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
      {updateAvailable && !updateDownloaded && (
        <div className="alert alert-info alert-dismissible fade show mt-2" role="alert">
          <strong>üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</strong>
          <br />
          –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {updateAvailable.version} —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...
          <button 
            type="button" 
            className="btn-close" 
            onClick={() => setUpdateAvailable(null)}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          ></button>
        </div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {downloadProgress && (
        <div className="download-progress mt-2">
          <div className="d-flex justify-content-between align-items-center mb-1">
            <small>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...</small>
            <small>{Math.round(downloadProgress.percent)}%</small>
          </div>
          <div className="progress">
            <div 
              className="progress-bar progress-bar-striped progress-bar-animated" 
              role="progressbar" 
              style={{ width: `${downloadProgress.percent}%` }}
              aria-valuenow={downloadProgress.percent}
              aria-valuemin={0}
              aria-valuemax={100}
            ></div>
          </div>
          <small className="text-muted">
            {(downloadProgress.transferred / (1024 * 1024)).toFixed(1)} MB / {(downloadProgress.total / (1024 * 1024)).toFixed(1)} MB
            ({(downloadProgress.bytesPerSecond / (1024 * 1024)).toFixed(1)} MB/s)
          </small>
        </div>
      )}

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∞—á–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
      {updateDownloaded && (
        <div className="alert alert-success alert-dismissible fade show mt-2" role="alert">
          <strong>‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!</strong>
          <br />
          –í–µ—Ä—Å–∏—è {updateDownloaded.version} —Å–∫–∞—á–∞–Ω–∞ –∏ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
          <button 
            type="button" 
            className="btn-close" 
            onClick={() => setUpdateDownloaded(null)}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å"
          ></button>
        </div>
      )}
    </div>
  );
};

export default UpdateNotification; 