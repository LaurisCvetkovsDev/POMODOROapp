import React, { useState, useEffect } from "react";
import "./UpdateNotification.css";

interface UpdateInfo {
  version: string;
  isDev: boolean;
}

const UpdateNotification: React.FC = () => {
  const [updateStatus, setUpdateStatus] = useState<string>("");
  const [showNotification, setShowNotification] = useState<boolean>(false);
  const [updateInfo, setUpdateInfo] = useState<UpdateInfo | null>(null);
  const [isChecking, setIsChecking] = useState<boolean>(false);

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const getAppInfo = async () => {
      try {
        if (window.electronAPI?.getUpdateInfo) {
          const info = await window.electronAPI.getUpdateInfo();
          setUpdateInfo(info);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:", error);
      }
    };

    getAppInfo();

    // –°–ª—É—à–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (window.electronAPI?.onUpdateStatus) {
      window.electronAPI.onUpdateStatus((status: string) => {
        setUpdateStatus(status);
        setShowNotification(true);

        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          setShowNotification(false);
        }, 5000);
      });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
      checkForUpdates();
    }, 5000);
  }, []);

  const checkForUpdates = () => {
    if (window.electronAPI?.checkForUpdates) {
      setIsChecking(true);
      window.electronAPI.checkForUpdates();

      setTimeout(() => {
        setIsChecking(false);
      }, 3000);
    }
  };

  const downloadUpdate = () => {
    if (window.electronAPI?.downloadUpdate) {
      window.electronAPI.downloadUpdate();
    }
  };

  const installUpdate = () => {
    if (window.electronAPI?.installUpdate) {
      window.electronAPI.installUpdate();
    }
  };

  if (!showNotification && !isChecking) {
    return null;
  }

  return (
    <div className={`update-notification ${showNotification ? "show" : ""}`}>
      <div className="update-content">
        <div className="update-header">
          <span className="update-icon">üîÑ</span>
          <span className="update-title">–û–±–Ω–æ–≤–ª–µ–Ω–∏—è</span>
          <button
            className="update-close"
            onClick={() => setShowNotification(false)}
          >
            √ó
          </button>
        </div>

        <div className="update-body">
          {isChecking ? (
            <div className="update-checking">
              <div className="spinner"></div>
              <span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</span>
            </div>
          ) : (
            <>
              <p className="update-status">{updateStatus}</p>
              {updateInfo && (
                <p className="current-version">
                  –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {updateInfo.version}
                </p>
              )}

              <div className="update-actions">
                <button
                  className="update-btn primary"
                  onClick={checkForUpdates}
                >
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                </button>

                {updateStatus.includes("–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ") && (
                  <button
                    className="update-btn secondary"
                    onClick={downloadUpdate}
                  >
                    –°–∫–∞—á–∞—Ç—å
                  </button>
                )}

                {updateStatus.includes("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ") && (
                  <button
                    className="update-btn install"
                    onClick={installUpdate}
                  >
                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                  </button>
                )}
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default UpdateNotification;
